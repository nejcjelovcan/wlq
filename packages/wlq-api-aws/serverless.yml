service: wlq-api-aws

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    minimumCompressionSize: 1024

  websocketApiName: websocket-chat-${self:provider.stage}
  websocketApiRouteSelectionExpression: $request.body.action

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    ROOM_TABLE_NAME: ${self:custom.roomTableName}
    HTTP_ORIGIN: ${self:custom.httpOrigin}
    API_OCT_SECRET_KEY: ${env:API_OCT_SECRET_KEY}
    BROADCAST_TOPIC: ${self:custom.broadcastTopic}
    WEBSOCKET_PROTOCOL: wss
    WEBSOCKET_ENDPOINT: ${self:custom.websocketEndpoint}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:UpdateItem
        - dynamodb:Scan

      Resource:
        - { "Fn::GetAtt": ["RoomTable", "Arn"] }
        - Fn::Join: ["/", [{ "Fn::GetAtt": ["RoomTable", "Arn"] }, "index/*"]]
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - Fn::Join:
            [
              "",
              [
                "arn:aws:sns:${self:provider.region}:",
                { "Ref": "AWS::AccountId" },
                ":${self:custom.broadcastTopic}",
              ],
            ]

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-optimize
  - serverless-step-functions
  - serverless-domain-manager
  - serverless-dotenv-plugin
  - serverless-stack-output

package:
  individually: true
  excludeDevDependencies: true

custom:
  hostedZoneId: ${env:HOSTED_ZONE_ID}
  siteName: ${env:API_DOMAIN}
  httpOrigin: ${env:HTTP_ORIGIN}
  acmCertificateArn: ${env:ACM_CERTIFICATE_ARN}
  roomTableName: ${self:service}-RoomTable-${self:provider.stage}
  broadcastTopic: "${self:service}-broadcast-${self:provider.stage}"
  setupDomain:
    dev: true
    production: true
    staging: true
    test: false
  customDomain:
    enabled: ${self:custom.setupDomain.${self:provider.stage}}
    domainName: ${self:custom.siteName}
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
  output:
    file: ./src/__integration__/serverless-output.json
  websocketEndpoint:
    Fn::Join:
      - ""
      - - Ref: WebsocketsApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/
        - ${self:provider.stage}

functions:
  # REST Lambdas

  getToken:
    handler: src/lambdas/token/getToken.handler
    events:
      - http:
          path: getToken
          method: GET
          cors:
            origin: ${self:custom.httpOrigin}
            allowCredentials: true

  createRoom:
    handler: src/lambdas/room/createRoom.handler
    events:
      - http:
          path: createRoom
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          method: POST
          cors:
            origin: ${self:custom.httpOrigin}
            allowCredentials: true

  getRoom:
    handler: src/lambdas/room/getRoom.handler
    events:
      - http:
          path: getRoom
          authorizer:
            name: authorize
            resultTtlInSeconds: 0
          method: POST
          cors:
            origin: ${self:custom.httpOrigin}
            allowCredentials: true

  # SOCKET Lambdas
  socketConnection:
    handler: src/lambdas/socketConnection.handler

    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

  joinRoom:
    handler: src/lambdas/room/joinRoom.handler
    events:
      - websocket:
          route: joinRoom

  startGame:
    handler: src/lambdas/game/startGame.handler
    environment:
      GAME_QUESTION_TIMEOUT: ${self:resources.Outputs.GameQuestionTimeout.Value}
    events:
      - websocket:
          route: startGame

  # SNS Lambdas
  broadcastToRoom:
    maximumRetryAttempts: 0
    handler: src/lambdas/broadcastToRoom.handler
    events:
      - sns:
          arn:
            Ref: BroadcastTopic
          topicName: ${self:custom.broadcastTopic}
          # filterPolicy:
          #   action:
          #     - setParticipants
          #     - participantJoined
          #     - participantLeft
          #     - error

  # AUTHORIZE
  authorize:
    handler: src/lambdas/authorize.handler

  # STEP FUNCTIONS
  setQuestionToken:
    handler: src/lambdas/game/setQuestionToken.handler

  revealAnswer:
    handler: src/lambdas/game/revealAnswer.handler

stepFunctions:
  stateMachines:
    GameQuestionTimeout:
      name: GameQuestionTimeout
      definition:
        Comment: Issues a questionToken for a given room to be sent after all users answer, otherwise times out after certain time
        StartAt: IssueQuestionToken
        States:
          IssueQuestionToken:
            Type: Task
            Resource: "arn:aws:states:::lambda:invoke.waitForTaskToken"
            Parameters:
              FunctionName:
                Fn::GetAtt: [setQuestionToken, Arn]
              Payload:
                roomId.$: $.roomId
                questionToken.$: $$.Task.Token
            TimeoutSecondsPath: $.questionTime
            Next: RevealAnswer
            ResultPath: $.output
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: RevealAnswer
                ResultPath: $.output
          RevealAnswer:
            Type: Task
            Resource: "arn:aws:states:::lambda:invoke"
            Parameters:
              FunctionName:
                Fn::GetAtt: [revealAnswer, Arn]
              Payload:
                roomId.$: $.roomId
                output.$: $.output
            Next: End
          End:
            Type: Succeed

resources:
  Outputs:
    GameQuestionTimeout:
      Value:
        Ref: GameQuestionTimeout

  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${self:custom.httpOrigin}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    BroadcastTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.broadcastTopic}

    WebsocketsApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:provider.stage}-wlq-api-aws-websocket
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"

    RoomTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.roomTableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: InverseIndex
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection:
              # TODO we could probably do with KEYS_ONLY
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
